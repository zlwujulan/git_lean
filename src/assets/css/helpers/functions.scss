@function px2rem($px) {
    @return $px / 75px * 1rem * 2;
}
/**
* Set font color according the background
* source: http://thesassway.com/intermediate/dynamically-change-text-color-based-on-its-background-with-sass
* @param {String} $background - background color - format accepted: hsla, rgb, #
* @return {String} #color
*/
@function set-text-color($background) {
    @if (lightness($background) > 50) {
        @return #000;
    } @else {
        @return #fff;
    }
}

/**
* Generate button style * @param {String} - $name - required
* @param {String} - $background - required - format accepted: hsla, rgb, #
* @param {Strong} - $color - optionnal - format accepted: hsla, rgb, #
* If no $color specify, the 'set-text-color' function is called * go check the _function.scss
*/
@mixin generate-button($name, $background, $color: '') {
    .dm-button {
        &.#{$name} {
            background: $background;
            @if ($color == '') {
                color: set-text-color($background);
            } @else {
                color: $color;
            }
            &:hover {
                background: lighten($background, 10%);
            }
            &:active {
                background: lighten($background, 10%);
            }
        }
    }
}


$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: false !default;
$prefix-for-opera: true !default;
$prefix-for-spec: false !default;
//浏览器前缀
@mixin prefixer($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if $prefix == webkit and $prefix-for-webkit == true {
            -webkit-#{$property}: $value;
        } @else if $prefix == moz and $prefix-for-mozilla == true {
            -moz-#{$property}: $value;
        } @else if $prefix == ms and $prefix-for-microsoft == true {
            -ms-#{$property}: $value;
        } @else if $prefix == o and $prefix-for-opera == true {
            -o-#{$property}: $value;
        } @else if $prefix == spec and $prefix-for-spec == true {
            #{$property}: $value;
        } @else {
            @warn "Unrecognized prefix: #{$prefix}";
        }
    }
}

//示例:
// @include prefixer(border-radius, $radius, webkit spec);
// Transform, transform-origin, transform-style
// ----------------------------------------
@mixin transform($property...) {
    @include prefixer(transform, $property, webkit moz o);
}

@mixin transform-origin($axes: 50%) {
    // x-axis - left | center | right | length | %
    // y-axis - top | center | bottom | length | %
    // z-axis - length
    @include prefixer(transform-origin, $axes, webkit moz o);
}

@mixin skewX($degrees) {
    @include prefixer(transform, skewX($degrees), webkit moz o);
    -webkit-backface-visibility: hidden;
}

// Return vendor-prefixed property names if appropriate
// Example: transition-property-names((transform, color, background), moz) -> -moz-transform, color, background
// ----------------------------------------
@function transition-property-names($props, $vendor: false) {
    $new-props: ();
    @each $prop in $props {
        $new-props: append($new-props, transition-property-names($prop, $vendor), comma);
    }
    @return $new-props;
}

@function transition-property-name($prop, $vendor: false) {
    // put other properties that need to be prefixed here aswell
    @if $vendor and $prop == transform {
        @return unquote('-'+$vendor+'-'+$prop);
    } @else {
        @return $prop;
    }
}

// transition
// ----------------------------------------
@mixin transition($properties...) {
    @if length($properties) >= 1 {
        @include prefixer(transition, $properties, webkit moz o);
    } @else {
        $properties: all 0.15s ease-out 0;
        @include prefixer(transition, $properties, webkit moz o ms spec);
    }
}

//7.定义fit-content
@mixin fit-content {
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: -o-fit-content;
    width: -ms-fit-content;
    width: fit-content;
}

#TTT {
    float: left;
    position: relative;
    //@include skewX(25deg);
    @include transform(skewX(-25deg) translateX(0));
    @include transform-origin(left top);
    @include transition(all .2s ease );
}
